#version 460
#define WORKGROUP_SIZE 1024
layout(local_size_x = WORKGROUP_SIZE) in;

layout(std430, binding = 0) readonly buffer Counts {
    uint counts[];
};

layout(std430, binding = 1) writeonly buffer PrefixSums {
    uint prefix[];
};

layout(std430, binding = 2) writeonly buffer BlockSums {
    uint blockSums[];
};

uniform uint numBlocks;
uniform uint numElements;

shared uint temp[WORKGROUP_SIZE];

void main() {
    uint gid = gl_GlobalInvocationID.x;
    uint lid = gl_LocalInvocationID.x;
    uint group = gl_WorkGroupID.x;

    // Always initialize shared memory
    temp[lid] = (gid < numElements) ? counts[gid] : 0;

    memoryBarrierShared();
    barrier();

    // Inclusive scan (Kogge-Stone)
    for (uint offset = 1; offset < WORKGROUP_SIZE; offset *= 2) {
        uint val = 0;
        if (lid >= offset)
            val = temp[lid - offset];
        barrier();
        temp[lid] += val;
        barrier();
    }

    // Write block sum using first thread of next block
    // or last thread if it's the last block
    if (lid == 0) {
        uint blockSum = temp[WORKGROUP_SIZE - 1];
        
        // For partial blocks: find actual last element
        uint lastInBlock = min((group + 1) * WORKGROUP_SIZE - 1, numElements - 1);
        uint lastLid = lastInBlock - group * WORKGROUP_SIZE;
        
        if (lastLid < WORKGROUP_SIZE - 1) {
            blockSum = temp[lastLid];
        }
        
        blockSums[group] = blockSum;
    }

    // Exclusive scan result
    uint scanned = (lid > 0) ? temp[lid - 1] : 0;

    if (gid < numElements)
        prefix[gid] = scanned;
}