#version 430

// Launch 16 threads in the X direction and 16 threads in the Y direction per workgroup
// Launch 1 thread in the Z direction per workgroup
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba8) readonly uniform image3D slices;
layout (binding = 1, std430) buffer TransitionBuffer {
  uint transitions[];
};
layout (binding = 2, std430) buffer CountBuffer {
  uint transitionCount[];
};
layout (binding = 3, std430) buffer OverflowBuffer {
  uint overflowFlags[];
};

uniform int resolution;
uniform int resolutionZ;
uniform int sliceCount;
uniform int zStart;

// Define the maximum number of transitions per XY column
const uint MAX_TRANSITIONS_PER_PIXEL = 32u;

void main() {
  // gl_GlobalInvocationID is a 3D vector, where:
  // - gl_GlobalInvocationID.xy corresponds to the XY coordinates in the 2D grid
  // - gl_GlobalInvocationID.z corresponds to the Z coordinate (slice index)
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  int z = int(gl_GlobalInvocationID.z);

  if (xy.x >= resolution || xy.y >= resolution || z >= sliceCount) return;

  ivec3 a = ivec3(xy, z);
  ivec3 b = ivec3(xy, z + 1); // compare with next slice

  vec4 colorA = imageLoad(slices, a);
  vec4 colorB = imageLoad(slices, b);

  bool redA = (colorA.r == 1.0);
  bool redB = (colorB.r == 1.0);

  if (redA != redB) {
    int columnIndex = xy.y * resolution + xy.x;
    uint count = transitionCount[columnIndex];

    if (count < MAX_TRANSITIONS_PER_PIXEL) {
      uint offset = columnIndex * MAX_TRANSITIONS_PER_PIXEL + count;
      transitions[offset] = uint(zStart + z);
      transitionCount[columnIndex] = count + 1;
    } else {
      overflowFlags[columnIndex] = 1u; // Set overflow flag
    }
  }
}


/*
#version 430

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba8) readonly uniform image3D slices;
layout (binding = 1, std430) buffer TransitionBuffer {
  uint transitions[];
};
layout (binding = 2, std430) buffer CountBuffer {
  uint transitionCount[];
};

uniform int resolution;
uniform int resolutionZ;
uniform int sliceCount;
uniform int zStart;

void main() {
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  int z = int(gl_GlobalInvocationID.z);

  if (xy.x >= resolution || xy.y >= resolution || z >= sliceCount) return;

  ivec3 a = ivec3(xy, z);
  ivec3 b = ivec3(xy, z + 1); // compare with next slice

  vec4 colorA = imageLoad(slices, a);
  vec4 colorB = imageLoad(slices, b);

  bool redA = (colorA.r == 1.0);
  bool redB = (colorB.r == 1.0);

  if (redA != redB) {
    int columnIndex = xy.y * resolution + xy.x;
    uint zCoord = zStart + z;

    uint offset = columnIndex * resolutionZ + transitionCount[columnIndex];
    transitions[offset] = zCoord;
    transitionCount[columnIndex]++;
  }
}
*/