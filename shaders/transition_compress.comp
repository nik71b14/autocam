#version 430

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 0, rgba8) readonly uniform image2D inputImage;
layout (std430, binding = 1) buffer TransitionBuffer {
    uint transitions[];
};
layout (std430, binding = 2) buffer CounterBuffer {
    uint counter;
};

uniform uint resolution;

void main() {
    uint row = gl_GlobalInvocationID.x;
    if (row >= resolution) return;

    for (uint col = 0; col < resolution; ++col) {
        vec4 pixel = imageLoad(inputImage, ivec2(col, row));
        bool current = pixel.r > 0.5;

        if (col > 0) {
            vec4 prevPixel = imageLoad(inputImage, ivec2(col - 1, row));
            bool previous = prevPixel.r > 0.5;

            if (current != previous) {
                uint index = atomicAdd(counter, 1);
                transitions[index] = (row << 16) | col; // codifica transizione
            }
        }
    }
}
