
  //@@@ QUA VEDERE PERCHE' NON FUNZIONA CON VoxelObject result
  // Copy back the result
  // VoxelObject result;
  ops.subtractGPU_copyback(ops.getObjects()[0]);
  // ops.subtractGPU_copyback(result);

  //@@@ QUA USARE IN INPUT DEL VIEWER DIRETTAMENTE UN VoxelObject
  VoxelViewer viewer(ops.getObjects()[0].compressedData, ops.getObjects()[0].prefixSumData, ops.getObjects()[0].params);

  

-> Provare lavorazione
-> Visualizzare passando direttamente il buffer con i dati al raymarching shader!!!
-> Testare con oggetti con transizioni > 2 nella direzione Z


-> "aggancio" di un utensile voxelizzato al punto di lavoro del simulatore gcode
-> sottrazione dell'utensile voxelizzato dal workpiece passo per passo, durante la simulazione


-> GLuint per la dimensione dei due blocchi di dati dataSize e prefixSize è forse poco, passare a size_t???
    
-> Passare MAX_TRANSITIONS_PER_PIXEL allo shader in maniera dinamica
-> Se ho un overflow riguardo al massimo numero di transizioni in Z, creare un loop che le aumenta

-> Gestire la situazione per diverse schede video con varie caratteristiche: istanziare SSBO multipli o splittare l'immagine in più parti e voxelizzare a sezioni
-> La voxelizzazione per parti forse è la cosa più comoda, poi devo riassemblare i blocchi ecc.

-> Rotazione dei blocchi che rappresentano l'utensile secondo due assi (l'utensile è assialsimmetrico)
-> Intersezione di due blocchi con un certo offset del blocco-utensile rispetto al blocco-pezzo, che considero fermo
-> Quando faccio avanzare l'utensile a "step", creo uno scalloping nella direzione di avanzamento, che è fittizio; posso evitarlo?
-> Unità di misura quando voxelizzo?